// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WeatherForecast.BDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WeatherEnthusiast")]
    public partial class WeatherEnthusiastFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "WeatherEnthusiast.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features", "WeatherEnthusiast", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TemperatureAndWeatherChecker")]
        [NUnit.Framework.CategoryAttribute("IncludedDynamicDateValidation_ExcludedToday\'sResults")]
        [NUnit.Framework.TestCaseAttribute("Sydney", "5", "200", "above", "20", "sunny", null)]
        [NUnit.Framework.TestCaseAttribute("Adelaide", "5", "200", "below", "15", "broken clouds", null)]
        [NUnit.Framework.TestCaseAttribute("Brisbane", "5", "200", "above", "20", "scattered clouds", null)]
        [NUnit.Framework.TestCaseAttribute("London", "5", "200", "above", "20", "overcast clouds", null)]
        [NUnit.Framework.TestCaseAttribute("Melbourne", "5", "200", "above", "20", "overcast clouds", null)]
        public virtual void TemperatureAndWeatherChecker(string cityName, string number, string statusCode, string condition, string degrees, string weather, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "IncludedDynamicDateValidation_ExcludedToday\'sResults"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CityName", cityName);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Condition", condition);
            argumentsOfScenario.Add("Degrees", degrees);
            argumentsOfScenario.Add("Weather", weather);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TemperatureAndWeatherChecker", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given(string.Format("As a Weather Enthusiast, I want to know the weather in \"{0}\"", cityName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When(string.Format("the predicted temperature to be above 20 degrees in the next {0} days", number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.And("I trigger \'GET\' API call to retrieve the weather response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then(string.Format("I validate the status code as \"{0}\" from the response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.Then(string.Format("I check the values \"{0}\" and {1} in the response", condition, degrees), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then(string.Format("I also want to know \"{0}\" in the same time period", weather), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And(string.Format("I logged the Number of days \"{0}\" in console window", weather), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("I logged the retrieved response in console for reference", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TemperatureAndWeatIherCheckerWithoutDateValidation")]
        [NUnit.Framework.CategoryAttribute("WithoutDateInput_IncludedToday\'sResults")]
        [NUnit.Framework.TestCaseAttribute("Sydney", "5", "200", "above", "20", "sunny", null)]
        [NUnit.Framework.TestCaseAttribute("Adelaide", "5", "200", "below", "15", "broken clouds", null)]
        [NUnit.Framework.TestCaseAttribute("Brisbane", "5", "200", "above", "20", "scattered clouds", null)]
        [NUnit.Framework.TestCaseAttribute("London", "5", "200", "above", "20", "overcast clouds", null)]
        [NUnit.Framework.TestCaseAttribute("Melbourne", "5", "200", "above", "20", "overcast clouds", null)]
        public virtual void TemperatureAndWeatIherCheckerWithoutDateValidation(string cityName, string number, string statusCode, string condition, string degrees, string weather, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "WithoutDateInput_IncludedToday\'sResults"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CityName", cityName);
            argumentsOfScenario.Add("Number", number);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Condition", condition);
            argumentsOfScenario.Add("Degrees", degrees);
            argumentsOfScenario.Add("Weather", weather);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TemperatureAndWeatIherCheckerWithoutDateValidation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given(string.Format("As a Weather Enthusiast, I want to know the weather in \"{0}\"", cityName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When(string.Format("the predicted temperature to be above 20 degrees in the next {0} days", number), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.And("I trigger \'GET\' API call to retrieve the weather response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then(string.Format("I validate the status code as \"{0}\" from the response", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.Then(string.Format("I check the values \"{0}\" and {1} in the response without date input values", condition, degrees), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.Then(string.Format("I also want to know \"{0}\" in the same time period in the response without date in" +
                            "put values", weather), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And(string.Format("I logged the Number of days \"{0}\" in console window", weather), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("I logged the retrieved response in console for reference", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
